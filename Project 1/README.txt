Project 1 - K24 - Unix Systems Programming
Θοδωρής Μπανιώκος - 1115201800121 - sdi1800121@di.uoa.gr
Το συγκερκιμένο αρχείο περιέχει πληροφορίες για το compiliation, τις σχεδιαστικές επιλογές και τον κώδικα.

- Οργάνωση αρχείων και φακέλων του project

• Στο project αυτό:
    Τα αρχεία με τον source code βρίσκονται στον φάκελο src σε ξεχωριστούς υποφακέλους για κάθε δομή / λειτουργεία του προγράμματος
    Τα Header αρχεία βρίσκονται στον φάκελο inc
    Τα αρχεία εισόδου βρίσκονται στον φάκελο input
    Στον κεντρικό φάκελο υπάρχει το κύριο .c αρχείο που περιέχει την main συνάρτηση το Makefile το bash script και το README

- Compilation

• Για να γίνει compile του κώδικα αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make

• Για να γίνει compile του κώδικα και εκτέλεση του προγράμματος αμέσως μετά αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make run

    Η παραπάνω εντολή φτιάχνει και το αρχείο citizenRecordsFile με 5000 γραμμές χωρίς διπλότυτα, αυτό μπορεί να αλλάξει στην γραμμή 42 του Makefile

• Για να καθαριστούν οι φάκελοι του project και να διαγραφθούν τα binaries αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make clean

• Για να καθαριστούν οι φάκελοι του project και να διαγραφθούν τα binaries και το εκτελέσιμο αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make fullclean

• Για να εκτελεστεί το πρόγραμμα σε debug state αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project, και να είναι εγκατεστημένο το εργαλείο valgrind:

    make valgrind

- Εκτέλεση προγράμματος

• Για να εκτελεστεί το προγράμμα πρέπει να εκτελεστεί η εντολή:

    ./vaccineMonitor -c ./input/citizenRecordsFile.txt -b BloomSize

• Όπου αρχικά πρέπει να έχει γίνει και δημιουργία του citizenRecordsFile αν δεν υπάρχει ήδη, για να γίνει αυτό πρέπει να εκτελεστεί η εντολή:

    ./testFile.sh ./input/viruses.txt ./input/countries.txt numLines duplicatesAllowed

    viruses.txt : Περιέχει μία λίστα ιών, έναν σε κάθε γραμμή, βρίσκεται στον υποφάκελο input
    countries.txt : Περιέχει μία λίστα χωρών, μία σε κάθε γραμμή, βρίσκεται στον υποφάκελο input

- Σχεδιαστικές επιλογές

• Δομές:
  Στο project έχει χρησιμοποιηθεί generic υλοποιήση συνδεδεμένης λίστας για να υπάρχει reusability του κώδικα σε άλλα σημεία και για να αποθηκεύουμε στις λίστες και τα Hashtables
  δεδομένα διαφορετικών ειδών σε run-time και όχι compiliation-time.
  Συγκερκιμένα η παραπάνω λίστα έχει χρησιμοποιηθεί στην υλοποιήση ενός Hashtable και στην υλοποιήση του ζητούμενου Skiplist.
  
  Στο Bloomfilter έχει χρησιμοποιηθεί ένας πίνακας από unsigned ints για την αναπαράσταση των bits και την αποφυγή του προσήμου στο πρώτο bit του κάθε int.
  Το μέγεθος του πίνακα που θα έχει το Bloomfilter υπολογίζεται ανάλογα με το μέγεθος που θα δωθεί από τον χρήστη διαιρεμένο από το μέγεθος που χρειάζεται
  ένας unsigned int διότι χειριζόμαστε μόνο τα bit, επομένως αν μας δωθεί μέγεθος, για παράδειγμα, 100 bytes χρειαζόμαστε συνολικά 800 bits για την αναπαράσταση
  του bloom filter. Έτσι διαιρούμε με το μέγεθος των unsigned ints για να πάρουμε ακριβώς όσους χρειαζόμαστε χωρίς να σπαταλάμε παραπάνω μνήμη.

  Στο Skiplist υπάρχει ένας πίνακας από generic λίστες για να αναπαραστίσει το κάθε layer του. Ο αριθμός των layers είναι προκαθορισμένος και η δήλωση βρίσκεται στο αρχείο skipListIntr.h

  Η αποθήκευση των διαφόρων bloom filters και skiplists γίνεται με τη χρήση Hashtables

  Η αποθήκευση των ανθρώπων γίνεται επίσης με τη χρήση Hashtables

  Η αποθήκευση των διαφόρων ιών και χωρών γίνεται με τη χρήση των generic λιστών

  Κάθε δομή, εκτός των Hashtable, έχει και το δικό της κλειδί ως αναγνωριστικό, ένα char *, για να ξεχωρίζουμε σε τι αναφέρεται.

  Έχουν δημιουργηθεί και μερικές βοηθητικές δομές, συγκερκιμένα η δομή vaccinationData λειτουργεί ως container για να υπάρχουν όλα τα απαραίτητα
  Hashtables, που έχουν skiplists και bloom filters, και οι απαραίτητες λίστες μαζεμένες. Η δομή personVaccination χρησιμοποιήτε για την αποθήκευση
  της πληροφορίας του αν ένας άνθρωπος είναι εμβολιασμένος η όχι και τις απαραίτητες επιπλέον λεπτομέρειες, π.χ. ημερομηνία. Η δομή countryInformation
  χρησιμοποιήτε για την αποθήκευση της κάθε χώρας, του πληθισμού της και του πληθισμού του κάθε ηλικιακού group. Η δομή PersonInformation 
  χρησιμοποιήτε για την αποθήκευση των στοιχείων του κάθε ανθρώπου.

• Λεπτομέρειες
  Χρησιμοποιήθηκαν Hashtables για την αποθήκευση των skiplists, Bloomfilters και ανθρώπων για μέση πολύπλοκότητα εισαγωγής και αναζήτησης O(1)

  Χρησιμοποιήθηκαν λίστες για την αποθήκευση των ιών και των χωρών διότι αυτά τα δεδομένα υπάρχουν όπου χρειάζεται χωρίς να γίνεται κάποια διεργασία
  στις λίστες και όποτε χρειάζεται να γίνει μία διεργασία θα είναι για αναζήτηση αν υπαρχεί ήδη στην βάση δεδομένων της εφαρμογής η για τις population status (by age),
  όταν δε δίνεται κάποια χώρα και ελέγχουμε όλες τις χώρες. Το παραπάνω γίνεται σε πολυπλοκότητα O(n).

  Κάθε skiplist και κάθε Bloomfilter αναγνωρίζεται από το δικό του κλειδί, στην προκειμένη περίπτωση είναι το όνομα του ιού που αντιπροσωπεύει και βάση αυτού
  γίνεται η αποθήκευση στα Hashtables, η αναζήτηση και η ανάκτηση του κατάλληλου κάθε φορά.

  Η αναζήτηση των ανθρώπων γίνεται στο Hashtable βάση του citizen id που έχουν

- Λειτουργικότητα εφαρμογής
 
• Αρχικά η εφαρμογή διαβάζει τα command line arguments και αρχικοποιεί το input stream με το αρχείο citizenRecordsFile και μια μεταβλητή που αντιπροσωπεύει το μέγεθος του bloom filter
  και μετά αρχικοποιεί τις δομές που αποθηκεύουμε τις εγγραφές που δίνονται από το αρχείο.
  Έπειτα ξεκινάει ένα while loop το οποίο τελείωνει μόνο αν υπάρξει κάποιο error στην εφαρμογή κατα τη διάρκεια εκτέλεσης ή αν δωθεί εντολή εξόδου από το προγράμμα.

• Η αρχικοποίηση των δωμών γίνεται στην initDataStructs, όπου δεσμεύεται πρώτα μνήμη για τα structs, και μετά διαβάζει μία μία τις γραμμές του αρχείο με έναν custom string parser που έχει υλοποιηθεί.
  Κάθε μία εγγραφή αποτιμήτε και γίνεται εισαγωγή των δεδομένων που δείνει, αν δεν είναι inconsistent, στις κατάλληλες skip list και bloom filters, για τους ανθρώπους αποθηκεύονται στο hashtable και
  οι χώρες/ιοί σε αντίστοιχες λίστες.

• Η κάθε εντολή του προγράμματος έχει παρόμοιες λειτουργείες για error checking, δηλαδή ελέγχουμε για την υπαρξή των χωρών/ιών για να μην τα ξανά αποθηκεύσουμε και το ίδιο γίνεται για τους
  ανθρώπους, ελέγχοντας όλα τα στοιχεία του, id όνομα επίθετο κπλ. Αν δε βρεθεί το skiplist η το Bloomfilter για το συγκερκιμένο ιο η αν δεν υπάρχει ο άνθρωπος σταμάταει η εκτέλεση της εντολής
  και τυπώνεται το κατάλληλο μήνυμα στο χρήστη έκτος κι αν είναι εντολή εισαγωγής, δηλαδή ή η insertCitizenRecord ή η vaccinateNow.
  Πέρα από τα παραπάνω όλες οι εντολές λειτουργούν βάση των προδιαγραφών που έχουν δωθεί.

- Γενικά

• Γίνεται έλεγχος για το αν δίνονται σωστά γραμμένες οι εντολές.

• Τα arguments των εντολών έχουν συγκερκιμένο format οπότε δε γίνεται κάποιος έλεγχος για αυτά, όπως έχουν τονίσει οι διδάσκωντες/βοηθοί. Αν δωθούν λάθος ορίσματα η συμπεριφορά του προγράμματος
  είναι undefined.

• Για τη σωστή λειτουργεία όλων των δωμών χρησιμοποιήθηκε το εργαλείο για unit-testing acutest, πηγή https://github.com/mity/acutest

• Για τη σωστή διαχείρηση μνήμης χρησιμοποιήθηκε το εργαλείο valgrind, πηγή https://valgrind.org/

• Γίνεται επίσης ένα print ενώς απλού prompt, vaccineMonitor:~$ , για να γνωρίζουμε πως τρέχουμε το προγράμμα.

• Για την είσοδο από το tty έχει χρησιμοποιηθεί το stdin το οποίο λειτουργεί και ως pointer σε αρχείο.

• Για την generic υλοποιήση χρησιμοποιήθηκε void pointer, με typedef σε έναν τύπο Item.