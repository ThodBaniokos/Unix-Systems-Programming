Project 3 - K24 - Unix Systems Programming
Θοδωρής Μπανιώκος - 1115201800121 - sdi1800121@di.uoa.gr
Το συγκερκιμένο αρχείο περιέχει πληροφορίες για το compiliation, τις σχεδιαστικές επιλογές και τον κώδικα.

- Οργάνωση αρχείων και φακέλων του project

• Στο project αυτό:
    Τα αρχεία με το source code βρίσκονται στον φάκελο src σε ξεχωριστούς υποφακέλους για κάθε δομή / λειτουργεία του προγράμματος
    Επίσης κάποια κομμάτια κώδικα είναι μόνο του travelMonitor, κάποια του monitor και κάποια είναι κοινά, αυτά χωρίζονται στους φακέλους src/trvl_mon_client, src/mon_server, src/common_impls αντίστοιχα
    Τα Header αρχεία βρίσκονται στον φάκελο inc
    Στον φάκελο sample υπάρχει ένα sample input directory για την αρχικοποίηση των δομών δεδομένων, μπορείτε να χρησιμοποιείσεται και δικά σας αρχεία
    Στον κεντρικό φάκελο υπάρχει το Makefile και το README

- Compilation

• Για να γίνει compile του κώδικα αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make -s (για να μην εμφανίζεται το κάθε αρχείο που γίνεται compile) ή απλα make

• Για να γίνει compile του κώδικα και εκτέλεση του προγράμματος αμέσως μετά αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make run

• Για να καθαριστούν οι φάκελοι του project και να διαγραφθούν τα binaries αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make clean

• Για να καθαριστούν οι φάκελοι του project και να διαγραφθούν τα binaries και τα εκτελέσιμα αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:

    make fullclean

• Για να εκτελεστεί το πρόγραμμα σε debug state αρκεί να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project, και να είναι εγκατεστημένο το εργαλείο valgrind:

    make valgrind

- Εκτέλεση προγράμματος

• Για να εκτελεστεί το πρόγραμμα πρέπει πρώτα να γίνει μεταγλώτιση και έπειτα να εκτελεστεί η παρακάτω εντολή στον κεντρικό φάκελο του project:
    ./travelMonitorClient -m numMonitors -b socketBufferSize -c cyclicBufferSize -s sizeOfBloom -i input_dir -t numThreads

    Με:
        numMonitors -> ο αριθμός των monitor processes που θα εκτελεστούν
        socketBufferSize -> το μέγεθος του buffer που χρησιμοποιείται για διαβασμα και γράψιμο *σε bytes*
        sizeOfBloom -> το μέγεθος του bloom filter που χρησιμοποιείται στο travelMonitor και monitor *σε bytes*
        input_dir -> ο φάκελος με τα αρχεία των χωρών
        cyclicBufferSize -> το μέγεθος του κυκλικού buffer
        numThreads -> ο αριθμός των νημάτων κάθε child process

- Οι Δομές δεδομένων, ο τρόπος αρχικοποίησης, το προτόκολο αποστολής μηνυμάτων, ο τρόπος εισαγωγής εντολών, ο τρόπος διαβάσματος αρχείων είναι ίδιος με το project 2

- Το προτόκολο που χρησιμοποιήθηκε για την διαδικτυακή επικοινωνία είναι το TCP/IP, το socket του server επιλέχθηκε να είναι reusable και το port επιλέχθηκε βάση του https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
  ώστε να μην επικαλυφθεί κάποιο assigned.

- Ο server είναι το monitorServer (το child process) και ο client το travelMonitorClient (το main process)

- Για να μην υπάρξει κάποια συγχυσή στην εκτέλεση των threads κάθε αρχείο που διαβάζεται και ανοίγεται μπαίνει σε locked state μέσω της flockfile για να μην μπορει κάποιο αλλο thread να το ανοίξει

- Όταν το main thread δεν έχει κάποιο άλλο αρχείο να βάλει μπαίνει σε μια λουπα η οποία σταματά όταν ο αριθμός των στοιχείων στον κυκλικό buffer είναι μηδέν ή μικρότερος
  δηλαδή περιμένει πρώτα να τελειώσει η αρχικοποίηση των δομών ώστε να στείλει τα σωστά δεδομένα στο travelMonitorClient.

- Για την εντολή /travelStats έχει γίνει η παραδοχή πως οι χώρες πρέπει να είναι μέσα σε αυτές που υπάρχουν στον φάκελο input_dir.

- Γενικά

• Γίνεται έλεγχος για το αν δίνονται σωστά γραμμένες οι εντολές.

• Τα arguments των εντολών έχουν συγκερκιμένο format οπότε δε γίνεται κάποιος έλεγχος για αυτά, όπως έχουν τονίσει οι διδάσκωντες/βοηθοί. Αν δωθούν λάθος ορίσματα η συμπεριφορά του προγράμματος
  είναι undefined.

• Για τη σωστή διαχείρηση μνήμης χρησιμοποιήθηκε το εργαλείο valgrind, πηγή https://valgrind.org/

• Γίνεται επίσης ένα print ενώς απλού prompt, travelMonitorClient:~$ , για να γνωρίζουμε πως τρέχουμε το προγράμμα.
